function S = intensity_quant(mat_filename, conditions_cell)
%%INTENSITY_QUANT calculates the max, mean, and sum intensities of ame1
%%signals after background subtraction
%
%   inputs :
%       mat_filename : A string variable specifying the MAT-file containing
%       the 'ame1' strucuture array generated by the ame1_ben_data_parse.m
%       script.
%
%       conditions_cell : A cell array containing the fieldnames of the
%       ame1 structure array to include in the data analysis.

data = load(mat_filename);
ame1 = data.ame1;
clear data;

for c = 1:numel(conditions_cell)
    filter_cell = ame1.(conditions_cell{c}).filterCell;
    c1_ints = zeros([size(filter_cell, 1) - 1, 2]);
    c2_ints = zeros([size(filter_cell, 1) - 1, 2]);
    c1_ints_bg_sub = zeros([size(filter_cell, 1) - 1, 2]);
    c2_ints_bg_sub = zeros([size(filter_cell, 1) - 1, 2]);
    c1_mean_bgsub_array = zeros([size(filter_cell, 1) - 1, 1]);
    c2_mean_bgsub_array = zeros([size(filter_cell, 1) - 1, 1]);
    c1_sum_bgsub_array = zeros([size(filter_cell, 1) - 1, 1]);
    c2_sum_bgsub_array = zeros([size(filter_cell, 1) - 1, 1]);
    c1_std_bgsub_array = zeros([size(filter_cell, 1) - 1, 1]);
    c2_std_bgsub_array = zeros([size(filter_cell, 1) - 1, 1]);
    c1_vol_array = zeros([size(filter_cell, 1) - 1, 1]);
    c1_int_vol_array = zeros([size(filter_cell, 1) - 1, 1]);
    c2_vol_array = zeros([size(filter_cell, 1) - 1, 1]);
    c2_int_vol_array = zeros([size(filter_cell, 1) - 1, 1]);
    cnt = 1;
    for i = 2:size(filter_cell,1)
        c1_f1_int = filter_cell{i,1}(4);
        c1_f2_int = filter_cell{i,2}(4);
        c2_f1_int = filter_cell{i,3}(4);
        c2_f2_int = filter_cell{i,4}(4);
        c1_ints(cnt, :) = [c1_f1_int, c1_f2_int];
        c2_ints(cnt, :) = [c2_f1_int, c2_f2_int];
        %% OTSU time!
        %% channel 1
        c1_stk = filter_cell{i,5}(:);
        c1_thresh_array = multithresh(c1_stk, 2);
        c1_thresh = multithresh(c1_stk(c1_stk > c1_thresh_array(end)));
        % use c1_thresh to bg sub the max intensity voxels
        c1_ints_bg_sub(cnt, :) = c1_ints(cnt, :) - c1_thresh;
        % use c1_thresh to determine total and mean ame1 signal above bg(both foci)
        c1_mean_bgsub = mean(c1_stk(c1_stk > c1_thresh)) - mean(c1_stk(c1_stk > ...
            c1_thresh_array(end) & c1_stk < c1_thresh));
        c1_std_bgsub = std(rescale(c1_stk(c1_stk > c1_thresh)) - mean(c1_stk(c1_stk > ...
            c1_thresh_array(end) & c1_stk < c1_thresh)));
        c1_sum_bgsub = c1_mean_bgsub * sum(c1_stk > c1_thresh, 'all');
        c1_vol_vox = sum(c1_stk > c1_thresh);
        c1_vol_array(cnt) = c1_vol_vox * (0.2*0.0645*0.0645);
        c1_mean_bgsub_array(cnt) = c1_mean_bgsub;
        c1_std_bgsub_array(cnt) = c1_std_bgsub;
        c1_sum_bgsub_array(cnt) = c1_sum_bgsub;
        c1_int_vol_array(cnt) = c1_mean_bgsub/(c1_vol_vox * (0.2*0.0645*0.0645));
        %% channel 2
        c2_stk = filter_cell{i,6}(:);
        c2_thresh_array = multithresh(c2_stk, 2);
        c2_thresh = multithresh(c2_stk(c2_stk > c2_thresh_array(end)));
        % use c2_thresh to bg sub the max intensity voxels
        c2_ints_bg_sub(cnt, :) = c2_ints(cnt, :) - c2_thresh;
        % use c2_thresh to determine mean ame1 signal above bg (both foci)
        c2_mean_bgsub = mean(c2_stk(c2_stk > c2_thresh)) - mean(c2_stk(c2_stk > ...
            c2_thresh_array(end) & c2_stk < c2_thresh));
        c2_std_bgsub = std(rescale(c2_stk(c2_stk > c2_thresh)) - mean(c2_stk(c2_stk > ...
            c2_thresh_array(end) & c2_stk < c2_thresh)));
        c2_sum_bgsub = c2_mean_bgsub * sum(c2_stk > c2_thresh, 'all');
        c2_vol_vox = sum(c2_stk > c2_thresh);
        c2_vol_array(cnt) = c2_vol_vox * (0.2*0.0645*0.0645);
        c2_mean_bgsub_array(cnt) = c2_mean_bgsub;
        c2_std_bgsub_array(cnt) = c2_std_bgsub;
        c2_sum_bgsub_array(cnt) = c2_sum_bgsub;
        c2_int_vol_array(cnt) = c2_mean_bgsub/(c2_vol_vox * (0.2*0.0645*0.0645));
        %% update counter
        cnt = cnt + 1;
    end
    %% Max Intensity Voxel Data
    S.(conditions_cell{c}).c1_ints = c1_ints;
    S.(conditions_cell{c}).c1_ints_bg_sub = c1_ints_bg_sub;
    S.(conditions_cell{c}).c2_ints = c2_ints;
    S.(conditions_cell{c}).c2_ints_bg_sub = c2_ints_bg_sub;
    %% Mean,Std, Sum, Volume, Density Data
    %Channel 1
    S.(conditions_cell{c}).c1_mean_bgsub_array = c1_mean_bgsub_array;
    S.(conditions_cell{c}).c1_std_bgsub_array = c1_std_bgsub_array;
    S.(conditions_cell{c}).c1_sum_bgsub_array = c1_sum_bgsub_array;
    S.(conditions_cell{c}).c1_vol_array = c1_vol_array;
    S.(conditions_cell{c}).c1_int_vol_array = c1_int_vol_array;
    %Channel 2
    S.(conditions_cell{c}).c2_mean_bgsub_array = c2_mean_bgsub_array;
    S.(conditions_cell{c}).c2_std_bgsub_array = c2_std_bgsub_array;
    S.(conditions_cell{c}).c2_sum_bgsub_array = c2_sum_bgsub_array;
    S.(conditions_cell{c}).c2_vol_array = c2_vol_array;
    S.(conditions_cell{c}).c2_int_vol_array = c2_int_vol_array;
end